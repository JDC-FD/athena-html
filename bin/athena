#! /usr/bin/env node --harmony
/**
 * 主入口，程序控制
 */

var fs = require('fs');
var path = require('path');
var request = require('request');
var inquirer = require('inquirer');
var program = require('commander');
var chalk = require('chalk');
var gutil = require('gulp-util');
var del = require('del');
var _ = require('lodash');

var Util = require('../lib/util');
var getGitStatus = require('../lib/util/git_status');

var App = require('../lib/create/task/app');
var MModule = require('../lib/create/task/module');
var Page = require('../lib/create/task/page');
var Widget = require('../lib/create/task/widget');
var builder = require('../lib/build');

var addReportPath = '/api/commands';
var deleteReportPath = '/api/delete';
var getVersionPath = '/api/version';
var userHome = Util.homedir();
var userName = process.env.USER || path.basename(userHome);
var config = Util.getConfig();
var setting = Util.getSetting();

// 数据上报
function report (command, reportPath, args, processParams, cb) {
  var requestParams = {
    cmd: command,
    time: new Date().getTime(),
    user: Util.getConfig().user_name,
    author: Util.getConfig().user_name,
    args: args
  };
  if (typeof processParams === 'function') {
    processParams(requestParams);
  }
  if (typeof cb !== 'function') {
    cb = function () {};
  }
  request.post(setting.report_url + reportPath, {
    form: requestParams,
    timeout: 5000
  }, function (err, res, body) {
    if (err) {
      console.log(chalk.red('  上报失败'));
      cb();
      return;
    }
    if (res.statusCode === 200 || res.statusCode === 201) {
      try {
        body = JSON.parse(body);
      } catch (e) {
        console.log(chalk.red('  上报失败'));
      }
    } else {
      console.log(chalk.red('  上报失败'));
    }
    cb(body);
  });
}

// 打印一下Athena的Logo
function printAthena () {
  var athenaText = fs.readFileSync(path.join(Util.getRootPath(), 'athena.txt'));
  console.log(gutil.colors.blue(String(athenaText)));
}

// 检测Athena版本
function checkAthenaVersion (successCb, errorCb) {
  request.get(setting.report_url + getVersionPath, function (err, res, body) {
    if (err) {
      errorCb && errorCb(err);
      return;
    }
    if (res.statusCode === 200 || res.statusCode === 201) {
      try {
        body = JSON.parse(body);
        if (body.no === 0) {
          var versionServer = body.data.v;
          var versionNative = Util.getPkgInfo().version;
          var compareResult = Util.compareVersion(versionNative, versionServer);
          successCb(versionServer, versionNative, compareResult);
        } else {
          errorCb && errorCb(body);
        }
      } catch (e) {
        errorCb && errorCb(e);
      }
    } else {
      errorCb && errorCb();
    }
  });
}

// 安装某一版本athena
function installAthena (installParams) {
  var exec = require('child_process').exec;
  var shellCode = 'npm install -g athena-html@' + installParams.version + ' --registry=http://registry.npm.taobao.org --disturl=http://npm.taobao.org/mirrors/node';
  // 非windows
  if (process.platform !== 'win32') {
    var nodeInstallPath = process.execPath;
    if (nodeInstallPath === '\/usr\/local\/bin\/node') {
      shellCode = 'sudo ' + shellCode;
    }
  }
  var child = exec(shellCode,
    function (error, stdout, stderr) {
      if (installParams.isDebug) {
        console.log('stdout: ' + stdout);
        console.log('stderr: ' + stderr);
      }
      if (error !== null) {
        if (installParams,isDebug) {
          console.log('Install error: ' + error);
        }
        console.log();
        console.log(chalk.red('  安装失败，你可以自行执行以下命令来执行安装：'));
        console.log(chalk.red('  ' + shellCode));
        installParams.onError && installParams.onError();
        return;
      }
      console.log();
      console.log(chalk.green('  安装成功，当前Athena版本' + installParams.version));
      console.log();
      installParams.onSuccess && installParams.onSuccess();    
    });
}

// 读取版本号
program
  .version(Util.getPkgInfo().version);

// Command: athena init [url]
program
  .command('init [url]')
  .description('初始化Athena')
  .action(function (url) {
    console.log(chalk.magenta('  Allo ' + userName + '! 开始愉快工作吧~'));
    if (!url) {
      url = process.cwd();
      console.log('  即将设置工作目录为当前目录！');
    } else {
      console.log('  即将设置工作目录为：', url);
    }
    console.log();
    var prompt = [];
    if (!config.work_space) {
      config.work_space = url;
    } else {
      if (config.work_space !== url) {
        prompt.push({
          type: 'confirm',
          name: 'needNewWorkSpace',
          message: '已经设置过工作目录' + config.work_space + '，是否要以新目录为工作目录？',
          default: false
        });
      }
    }
    prompt.push({
      type: 'input',
      name: 'userName',
      message: '雁过留声，人过留名~~',
      default: userName
    });
    inquirer.prompt(prompt, function (answers) {
      if (answers.needNewWorkSpace) {
        config.work_space = url;
      }
      config.user_name = answers.userName;
      Util.setConfig(config);
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ athena init');
    console.log();
  });

// Command: athena app [appName]
program
  .command('app [appName]')
  .alias('a')
  .description('创建新的项目')
  .option('--name [appName]', '项目名称')
  .option('--description [appDescription]', '项目描述')
  .option('--sass', '启用sass')
  .option('--less', '启用less')
  .option('--template [templateName]', '设置模板')
  .action(function(appName, option) {
    var app = new App({
      appName: appName || option.name,
      description: option.description,
      sass: option.sass,
      less: option.less,
      tmpId: option.template
    });
    // 创建完项目后进行数据上报
    app.create(function () {
      var argv = [].slice.call(arguments);
      report('app', addReportPath, argv, function (params) {
        var appConfPath = app.destinationPath(argv[0], 'app-conf.js');
        var commonModuleConfPath = app.destinationPath(argv[0], 'gb', 'module-conf.js');
        var commonModuleConf = require(commonModuleConfPath);
        params.appName = argv[0];
        params.appId = require(appConfPath).appId;
        params.commonModuleId = commonModuleConf.moduleId;
        params.commonModuleName = commonModuleConf.module;
      }, function (body) {
        if (body && body.no === 0) {
          console.log('success');
        }
      });
    });

  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ athena app cx');
    console.log('    $ athena a cx');
    console.log();
  });

// Command: athena module [moduleName]
program
  .command('module [moduleName]')
  .alias('m')
  .description('创建新的模块')
  .option('--name [appName]', '模块名称')
  .option('--description [moduleDescription]', '模块描述')
  .option('--sass', '启用sass')
  .option('--less', '启用less')
  .action(function(moduleName, option) {
    if (moduleName) {
      // 支持一次性创建多个模块
      var moduleList = moduleName.split(',');
      var promises = [];
      promises = moduleList.map(function (item) {
        return createModule.bind(null, item, option);
      });
      promises.reduce(function (prev, curr) {
        return prev.then(function () {
          return curr();
        });
      }, Promise.resolve('start')).catch(function (e) {
        if (e) {
          console.log(e.plugin);
          if (e.stack) {
            console.log(e.stack);
          }
        }
      });
    } else {
      createModule(moduleName, option);
    }
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ athena module my');
    console.log('    $ athena m my');
    console.log('    $ athena m my,hello');
    console.log();
  });

// 创建单个模块
function createModule (moduleName, option) {
  return new Promise(function (resolve, reject) {
    var mmodule = new MModule({
      moduleName: moduleName || option.name,
      moduleDescription: option.description,
      sass: option.sass,
      less: option.less
    });
    var appConfPath = mmodule.destinationPath('app-conf.js');
    if (!fs.existsSync(appConfPath)) {
      console.log(chalk.red('  出错了，当前目录没有app-conf.js，请检查当前目录是否是项目目录！'));
      reject();
      return;
    }
    mmodule.create(function () {
      var argv = [].slice.call(arguments);
      var appConf = require(appConfPath);
      if (appConf) {
        report('module', addReportPath, argv, function (params) {
          var moduleConfPath = mmodule.destinationPath(argv[0], 'module-conf.js');
          params.moduleName = argv[0];
          params.moduleId = require(moduleConfPath).moduleId;
          params.appName = appConf.app;
          params.appId = appConf.appId;
        }, function (body) {
          if (body && body.no === 0) {
            console.log('success');
          }
          resolve();
        });
      }
    });
  });
}

// Command: athena page [pageName]
program
  .command('page [pageName]')
  .alias('pa')
  .description('创建新的页面')
  .option('--name [pageName]', '页面名称')
  .option('--description [pageDescription]', '页面描述')
  .option('--sass', '启用sass')
  .option('--less', '启用less')
  .option('--remote [remoteName]', '选择域')
  .action(function(pageName, option) {
    var page = new Page({
      pageName: pageName || option.name,
      description: option.description,
      sass: option.sass,
      less: option.less,
      remote: option.remote
    });
    var moduleConfPath = page.destinationPath('module-conf.js');
    var appConfPath = path.join(path.resolve(page.destinationRoot(), '..'), 'app-conf.js');
    if (!fs.existsSync(moduleConfPath)) {
      console.log(chalk.red('  出错了，当前目录没有module-conf.js，请检查当前目录是否是一个模块目录！'));
      return;
    }
    // 创建完页面后提交统计
    page.create(function () {
      var argv = [].slice.call(arguments);
      var appConf = require(appConfPath);
      var moduleConf = require(moduleConfPath);
      if (appConf) {
        report('page', addReportPath, argv, function (params) {
          params.moduleName = moduleConf.module;
          params.moduleId = moduleConf.moduleId;
          params.appName = appConf.app;
          params.appId = appConf.appId;
          params.page = argv[0];
        }, function (body) {
          if (body && body.no === 0) {
            console.log('success');
          }
        });
      }
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ athena page shop');
    console.log('    $ athena pa shop');
    console.log();
  });

// Command: athena widget [widgetName]
program
  .command('widget [widgetName]')
  .alias('w')
  .option('--name [widgetName]', '组件名称')
  .option('--description [widgetDescription]', '组件描述')
  .option('--sass', '启用sass')
  .option('--less', '启用less')
  .option('--cms', '指定这是供CMS使用的楼层组件')
  .description('创建新的组件')
  .action(function(widgetName, option) {
    var widget = new Widget({
      widgetName: widgetName || option.name,
      description: option.description,
      sass: option.sass,
      less: option.less,
      cms: option.cms
    });
    var moduleConfPath = widget.destinationPath('module-conf.js');
    var appConfPath = path.join(path.resolve(widget.destinationRoot(), '..'), 'app-conf.js');
    if (!fs.existsSync(moduleConfPath)) {
      console.log(chalk.red('  出错了，当前目录没有module-conf.js，请检查当前目录是否是一个模块目录！'));
      return;
    }
    widget.create(function () {
      var argv = [].slice.call(arguments);
      var appConf = require(appConfPath);
      var moduleConf = require(moduleConfPath);
      if (appConf) {
        report('widget', addReportPath, argv, function (params) {
          params.moduleName = moduleConf.module;
          params.moduleId = moduleConf.moduleId;
          params.appName = appConf.app;
          params.appId = appConf.appId;
          params.widget = argv[0];
        }, function (body) {
          if (body && body.no === 0) {
            console.log('success');
          }
        });
      }
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ athena widget topbar');
    console.log('    $ athena w topbar');
    console.log();
  });


// Command: athena widget-remote [widgetName]
program
  .command('widget-remote [widgetName]')
  .alias('wr')
  .option('--name [widgetName]', '组件名称')
  .description('加载一个远程的组件')
  .action(function(widgetName, option) {
    widgetName = widgetName || option.widgetName;

    var widget = new Widget({
      widgetName: widgetName,
      description: option.description,
      sass: true,
      less: 0,
      cms: 0
    });
    var moduleConfPath = widget.destinationPath('module-conf.js');
    var appConfPath = path.join(path.resolve(widget.destinationRoot(), '..'), 'app-conf.js');
    if (!fs.existsSync(moduleConfPath)) {
      console.log(chalk.red('  出错了，当前目录没有module-conf.js，请检查当前目录是否是一个模块目录！'));
      return;
    }
    widget.loadRemote(function () {
      var argv = [].slice.call(arguments);
      var appConf = require(appConfPath);
      var moduleConf = require(moduleConfPath);
      if (appConf) {
        report('widget', addReportPath, argv, function (params) {
          params.moduleName = moduleConf.module;
          params.moduleId = moduleConf.moduleId;
          params.appName = appConf.app;
          params.appId = appConf.appId;
          params.widget = argv[0];
        }, function (body) {
          if (body && body.no === 0) {
            console.log('success');
          }
        });
      }
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ athena widgetremote timeline~pf_160322_1');
    console.log('    $ athena wr timeline~pf_160322_1');
    console.log();
  });
// Command: athena delete
program
  .command('delete')
  .alias('del')
  .option('-a, --app [appName]', '项目名称')
  .option('-m, --module [moduleName]', '模块名称')
  .option('-p, --page [pageName]', '模块名称')
  .option('-w, --widget [widgetName]', '组件名称')
  .description('删除操作')
  .action(function (option) {
    var appName = option.app;
    var moduleName = option.module;
    var pageName = option.page;
    var widgetName = option.widget;
    if (typeof(appName) !== 'string' && typeof(moduleName) !== 'string'
      && typeof(pageName) !== 'string' && typeof(widgetName) !== 'string') {
      console.log(chalk.red('  请输入参数！'));
      console.log();
      console.log(chalk.red('  通过命令 ath del -h 可查看帮助'));
      console.log();
    } else {
      // 判断当前是否是项目路径或模块路径
      var cwd = process.cwd();
      var appConfPath = path.join(cwd, 'app-conf.js');
      var moduleConfPath = path.join(cwd, 'module-conf.js');
      var deleteTypes = [];
      var deletePlace = '';
      var appConf = null;
      var moduleConf = null;
      if (Util.existsSync(appConfPath)) { // 项目根目录
        if (typeof(moduleName) !== 'string') {
          console.log(chalk.red('  在项目目录下，必须告知模块名！'));
          return;
        }
        appConf = require(appConfPath);

        moduleConfPath = path.join(cwd, moduleName, 'module-conf.js');
        if (!Util.existsSync(moduleConfPath)) {
          console.log(chalk.red('  没有找到模块' + moduleName + '，请检查当前目录是否符合规范！'));
          return;
        }
        moduleConf = require(moduleConfPath);
        deletePlace = 'app';
        // 删除模块
        if (typeof(pageName) !== 'string' && typeof(widgetName) !== 'string') {
          deleteTypes.push('mod');
        } else {
          if (typeof(pageName) === 'string') {
            if (!Util.existsSync(path.join(cwd, moduleName, 'page', pageName))) {
              console.log(chalk.red('  没有找到页面' + pageName + '，请检查当前目录是否符合规范！'));
              return;
            }
            deleteTypes.push('page');
          }
          if (typeof(widgetName) === 'string') {
            if (!Util.existsSync(path.join(cwd, moduleName, 'widget', widgetName))) {
              console.log(chalk.red('  没有找到组件' + widgetName + '，请检查当前目录是否符合规范！'));
              return;
            }
            deleteTypes.push('widget');
          }
        }
      } else if (Util.existsSync(moduleConfPath)) { // 模块根目录
        if (typeof(pageName) !== 'string' && typeof(widgetName) !== 'string') {
          console.log(chalk.red('  在模块目录下，必须告页面名或组件名！'));
          return;
        }
        appConf = require(path.join(path.resolve(cwd, '..'), 'app-conf'));
        moduleConf = require(moduleConfPath);
        deletePlace = 'module';
        if (typeof(pageName) === 'string') {
          if (!Util.existsSync(path.join(cwd, 'page', pageName))) {
            console.log(chalk.red('  没有找到页面' + pageName + '，请检查当前目录是否符合规范！'));
            return;
          }
          deleteTypes.push('page');
        }
        if (typeof(widgetName) === 'string') {
          if (!Util.existsSync(path.join(cwd, 'widget', widgetName))) {
            console.log(chalk.red('  没有找到组件' + widgetName + '，请检查当前目录是否符合规范！'));
            return;
          }
          deleteTypes.push('widget');
        }
      } else {
        if (typeof(appName) !== 'string') {
          console.log(chalk.red('  请输入项目名！'));
          return;
        }
        var appPath = path.join(cwd, appName);
        // 项目外删除
        if (Util.existsSync(appPath)) {
          deletePlace = 'outside';
          appConf = require(path.join(appPath, 'app-conf'));
          if (typeof(moduleName) !== 'string'
            && typeof(pageName) !== 'string' && typeof(widgetName) !== 'string') {
            deleteTypes.push('app');
          } else {
            if (typeof(moduleName) !== 'string') {
              console.log(chalk.red('  请输入模块名！'));
              return;
            } else {
              moduleConfPath = path.join(appPath, moduleName, 'module-conf.js');
              if (!Util.existsSync(moduleConfPath)) {
                console.log(chalk.red('  没有找到模块' + moduleName + '，请检查当前目录是否符合规范！'));
                return;
              }
              moduleConf = require(moduleConfPath);
              if (typeof(pageName) !== 'string' && typeof(widgetName) !== 'string') {
                deleteTypes.push('mod');
              } else {
                if (typeof(pageName) === 'string') {
                  if (!Util.existsSync(path.join(appPath, moduleName, 'page', pageName))) {
                    console.log(chalk.red('  没有找到页面' + pageName + '，请检查当前目录是否符合规范！'));
                    return;
                  }
                  deleteTypes.push('page');
                }
                if (typeof(widgetName) === 'string') {
                  if (!Util.existsSync(path.join(appPath, moduleName, 'widget', widgetName))) {
                    console.log(chalk.red('  没有找到组件' + widgetName + '，请检查当前目录是否符合规范！'));
                    return;
                  }
                  deleteTypes.push('widget');
                }
              }
            }
          }
        } else {
          console.log(chalk.red('  没有找到相应项目，请检查当前目录是否符合规范！'));
          return;
        }
      }
      deleteOperation({
        deleteTypes: deleteTypes,
        deletePlace: deletePlace,
        appName: appName,
        moduleName: moduleName,
        pageName: pageName,
        widgetName: widgetName,
        appConf: appConf,
        moduleConf: moduleConf
      });
    }
  }).on('--help', function () {
    console.log('  Examples:');
    console.log('');
    console.log('    $ athena delete -a cx');
    console.log('    $ athena delete -m tz');
    console.log();
  });

/**
 * 删除操作，根据当前所处不同位置
 */
function deleteOperation (deleteObj) {
  if (!deleteObj) {
    return;
  }
  var cwd = process.cwd();
  switch (deleteObj.deletePlace) {
    case 'outside':
      cwd = path.join(cwd, deleteObj.appName);
      deleteSth(cwd, deleteObj);
      break;
    case 'app':
      deleteSth(cwd, deleteObj);
      break;
    case 'module':
      deleteObj.moduleName = require(path.join(cwd, 'module-conf')).module;
      cwd = path.resolve(cwd, '..');
      deleteSth(cwd, deleteObj);
      break;
  }
}

/**
 * 删除项目，模块，页面，组件，并上报数据
 */
function deleteSth (cwd, deleteObj) {
  if (deleteObj.deleteTypes.indexOf('app') >= 0) { //删除项目
    deleteAtomic('app', '是否删除项目' + deleteObj.appName, cwd, null, function (params) {
      params.app = deleteObj.appConf.appId;
    });
  } else if (deleteObj.deleteTypes.indexOf('mod') >= 0) {
    deleteAtomic('module', '是否删除模块' + deleteObj.moduleName, path.join(cwd, deleteObj.moduleName),
      function () {
        var appConfFile = fs.readFileSync(path.join(cwd, 'app-conf.js'));
        var appConfStr = String(appConfFile);
        var appConfStrLines = appConfStr.split('\n');
        var moduleList = deleteObj.appConf.moduleList;
        var moduelIndex = moduleList.indexOf(deleteObj.moduleName);
        if (moduelIndex >= 0) {
          moduleList.splice(moduelIndex, 1);
          for (var i = 0; i < appConfStrLines.length; i++) {
            var line = appConfStrLines[i];
            if (line.indexOf('moduleList') >= 0) {
              appConfStrLines[i] = appConfStrLines[i].replace(/\[(.*)\]/, function (m) {
                var ret = '[';
                moduleList.forEach(function (item, i) {
                  ret += '\'' + item + '\'';
                  if (i < moduleList.length - 1) {
                    ret += ', ';
                  }
                });
                ret += ']';
                return ret;
              });
            }
          }
          fs.writeFileSync(path.join(cwd, 'app-conf.js'), appConfStrLines.join('\n'));
        }
      }, function (params) {
        params.mod = deleteObj.moduleConf.moduleId;
      });
  } else {
    if (deleteObj.deleteTypes.indexOf('page') >= 0) {
      deleteAtomic('page', '是否删除页面' + deleteObj.pageName, path.join(cwd, deleteObj.moduleName, 'page', deleteObj.pageName), null, function (params) {
        params.mod = deleteObj.moduleConf.moduleId;
        params.page = deleteObj.pageName;
      });
    }

    if (deleteObj.deleteTypes.indexOf('widget') >= 0) {
      deleteAtomic('widget', '是否删除组件' + deleteObj.widgetName, path.join(cwd, deleteObj.moduleName, 'widget', deleteObj.widgetName), null, function (params) {
        params.mod = deleteObj.moduleConf.moduleId;
        params.widget = deleteObj.widgetName;
      });
    }
  }
}

/**
 * 删除目录文件
 */
function deleteAtomic (cmd, confirmTip, delelePath, deleteCb, processParamsCb) {
  inquirer.prompt([{
    type: 'confirm',
    name: 'confirmDelete',
    message: confirmTip,
    default: false
  }], function (answers) {
    if (answers.confirmDelete) {
      del.sync(delelePath, {force: true});
      if (_.isFunction(deleteCb)) {
        deleteCb();
      }
      console.log();
      console.log(chalk.green('  删除成功！'));
      console.log();
      report(cmd, deleteReportPath, undefined, processParamsCb);
    }
  });
}

program
  .command('build')
  .alias('b')
  .description('编译项目or模块')
  .option('-a, --app [appName]', '编译项目')
  .option('-m, --module [moduleName]', '编译模块', function (val) {
    return val.split(',');
  })
  .option('--verbose', '编译详细信息')
  .option('--pack', '打包功能，输出静态稿')
  .option('--compress', '打包功能，输出静态稿，引用压缩后的静态资源')
  .option('--remote [remoteName]', '目标机器，根据app-conf.js中的配置')
  .option('--release', '发布功能')
  .action(function (option) {
    var app = null;
    var mod = null;
    // 带参数
    if (option) {
      if (typeof option.app === 'string') {
        app = option.app;
      }
      if (option.module && typeof option.module.sort === 'function') {
        mod = option.module;
      }
    }
    builder.build(app, mod, option);
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ athena build');
    console.log('    $ athena build -a cx');
    console.log('    $ athena build -m tz');
    console.log();
  });

program
  .command('serve')
  .alias('s')
  .description('预览项目or模块')
  .option('-a, --app [appName]', '预览项目')
  .option('-m, --module [moduleName]', '预览模块', function (val) {
    return val.split(',');
  })
  .option('--page [pageName]', '预览页面')
  .option('--verbose', '编译详细信息')
  .option('--dist', '预览经过完整编译流程后的文件')
  .action(function (option) {
    var app = null;
    var mod = null;
    // 带参数
    if (option) {
      if (typeof option.app === 'string') {
        app = option.app;
      }
      if (option.module && typeof option.module.sort === 'function') {
        mod = option.module;
      }
    }
    builder.serve(app, mod, option);
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ athena serve');
    console.log('    $ athena serve -a cx');
    console.log('    $ athena serve -m tz');
    console.log();
  });

program
  .command('publish')
  .alias('pu')
  .description('发布项目or模块，发布到预览机以及自定义开发机')
  .option('-a, --app [appName]', '发布项目')
  .option('-m, --module [moduleName]', '发布模块', function (val) {
    return val.split(',');
  })
  .option('-n, --noImage', '不发布图片')
  .option('--pack', '打包功能，输出静态稿')
  .option('--compress', '打包功能，输出静态稿，引用压缩后的静态资源')
  .option('--verbose', '发布详细信息')
  .option('--remote [remoteName]', '目标机器，根据app-conf.js中的配置')
  .option('--debug', '打印调试信息')
  .action(function (option) {
    var app = null;
    var mod = null;
    var isDebug = false;
    // 带参数
    if (option) {
      isDebug = option.debug ? true : false;
      if (typeof option.app === 'string') {
        app = option.app;
      }
      if (option.module && typeof option.module.sort === 'function') {
        mod = option.module;
      }
    }
    function checkVersionControl () {
      return new Promise(function (resolve, reject) {
        var cwd = process.cwd();
        var appConfPath = path.join(cwd, 'app-conf.js');
        var moduleConfPath = path.join(cwd, 'module-conf.js');
        var appConf = null;
        var versionControl = null;
        if (Util.existsSync(appConfPath)) {
          // 项目根目录
          appConf = require(appConfPath);
        } else if (Util.existsSync(moduleConfPath)) {
          // 模块目录
          appConfPath = path.join(path.resolve(cwd, '..'), 'app-conf.js');
          if (Util.existsSync(appConfPath)) {
            appConf = require(appConfPath);
          }
        }
        if (appConf !== null) {
          versionControl = appConf.versionControl;
          if (typeof versionControl === 'string' && versionControl === 'git') {
            return resolve();
          }
        }
        return reject('Version control check error');
      });
    }
    checkVersionControl()
      .then(getGitStatus).then(function (status) {
      if (!status.remoteBranch) {
        console.log();
        console.log(chalk.red('  检测到当前项目并未设置远程仓库，或者已经设置但并未提交代码！'));
        console.log(chalk.red('  请将代码push到远程仓库后再进行发布！'));
        console.log();
        throw new Error('git interrupt');
      }
      if (status.clean) {
        if (typeof status.remoteDiff === 'string' && status.remoteDiff.indexOf('ahead') >= 0) {
          console.log();
          console.log(chalk.red('  检测到你有本地提交，但并未将代码提交至远程仓库！'));
          console.log(chalk.red('  请将代码push到远程仓库后再进行发布！'));
          console.log();
          throw new Error('git interrupt');
        }
      } else {
        console.log();
        console.log(chalk.red('  检测到你本地有代码改动！'));
        console.log();
        if (status.files.length > 0) {
          status.files.forEach(function (item) {
            console.log(chalk.red('    ' + item));
          });
        }
        console.log();
        console.log(chalk.red('  请将代码push到远程仓库后再进行发布！'));
        console.log();
        throw new Error('git interrupt');
      }
    }, function (err) {
      if (isDebug) {
        console.log(err);
      }
    }).then(builder.publish.bind(null, app, mod, option)).then(function (argv) {
      var args = argv.files;
      if (argv.appConf) {
        report('publish', addReportPath, args, function (params) {
          params.appId = argv.appConf.appId;
        });
      }
    }).catch(function (e) {
      if (e.message !== 'git interrupt') {
        console.log(e.stack);
      }
    });
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ athena publish');
    console.log('    $ athena publish -a cx');
    console.log('    $ athena publish -m tz');
    console.log();
  });

program
  .command('clone [widget]')
  .description('复制一个widget')
  .option('-f, --from [source]', '来源模块')
  .option('-t, --to [dest]', '目标模块，不写则当前目录')
  .action(function (widget, option) {
    if (widget === undefined) {
      gutil.log(gutil.colors.red('请输入widgetName'));
      return;
    }
    var source = null;
    var dest = null;
    // 带参数
    if (option) {
      if (typeof option.from === 'string') {
        source = option.from;
      }
      if (typeof option.to === 'string') {
        dest = option.to;
      }
    }
    builder.clone(widget, source, dest);
  }).on('--help', function() {
    console.log('  Examples:');
    console.log('');
    console.log('    $ athena clone widgetName');
    console.log('    $ athena clone widgetName --from moduleName');
    console.log('    $ athena clone widgetName --from moduleName --to moduleName');
    console.log();
  });

program
  .command('clear')
  .description('清除缓存')
  .option('-p, --publish [remoteName]', '清除发布时的缓存')
  .option('-t, --template', '清除模板缓存')
  .option('-s, --sass', '清除sass编译缓存')
  .option('-i, --image', '清除图片压缩缓存')
  .option('-a, --app [appName]', '项目')
  .option('-m, --module [moduleName]', '模块')
  .action(function (option) {
    var athenaPath = Util.getAthenaPath();
    var athenaCachePath = path.join(athenaPath, 'cache');
    if (typeof option !== 'object') {
      console.log();
      console.log(chalk.red('  输入参数有误！'));
      console.log(chalk.red('  请通过 ath clear -h 查看帮助！'));
      console.log();
      return;
    }
    if (option.publish || option.template || option.sass || option.image) {
      var cwd = process.cwd();
      var appConfPath = path.join(cwd, 'app-conf.js');
      var moduleConfPath = path.join(cwd, 'module-conf.js');
      var mod = option.module ? option.module : null;
      if (option.publish) {
        var publish = option.publish;
        if (Util.existsSync(appConfPath)) {
          if (mod !== null) {
            if (typeof publish === 'string') {
              del.sync(path.join(athenaPath, 'publish', require(appConfPath).app, mod, publish + '_filter.json'), { force: true });
            } else {
              del.sync(path.join(athenaPath, 'publish', require(appConfPath).app, mod), { force: true });
            }
          } else {
            del.sync(path.join(athenaPath, 'publish', require(appConfPath).app), { force: true });
          }
        } else if (Util.existsSync(moduleConfPath)) {
          if (typeof publish === 'string') {
            del.sync(path.join(athenaPath, 'publish', require(moduleConfPath).app, require(moduleConfPath).module, publish + '_filter.json'), { force: true });
          } else {
            del.sync(path.join(athenaPath, 'publish', require(moduleConfPath).app, require(moduleConfPath).module), { force: true });
          }
        } else {
          del.sync(path.join(athenaPath, 'publish'), { force: true });
        }
      } else if (option.sass) {
        if (Util.existsSync(appConfPath)) {
          if (mod !== null) {
            del.sync(path.join(athenaCachePath, 'build', 'sass', require(appConfPath).app, mod), { force: true });
          } else {
            del.sync(path.join(athenaCachePath, 'build', 'sass', require(appConfPath).app), { force: true });
          }
        } else if (Util.existsSync(moduleConfPath)) {
          del.sync(path.join(athenaCachePath, 'build', 'sass', require(moduleConfPath).app, require(moduleConfPath).module), { force: true });
        } else {
          del.sync(path.join(athenaCachePath, 'build', 'sass'), { force: true });
        }
      } else if (option.image) {
        if (Util.existsSync(appConfPath)) {
          if (mod !== null) {
            del.sync(path.join(athenaCachePath, 'build', 'images', require(appConfPath).app, mod), { force: true });
          } else {
            del.sync(path.join(athenaCachePath, 'build', 'images', require(appConfPath).app), { force: true });
          }
          del.sync(path.join(athenaCachePath, 'build', 'images', require(appConfPath).app), { force: true });
        } else if (Util.existsSync(moduleConfPath)) {
          del.sync(path.join(athenaCachePath, 'build', 'images', require(moduleConfPath).app, require(moduleConfPath).module), { force: true });
        } else {
          del.sync(path.join(athenaCachePath, 'build', 'images'), { force: true });
        }
      } else if (option.template) {
        del.sync(path.join(athenaPath, 'tmp'), { force: true });
      }
    } else {
      del.sync(path.join(athenaPath, 'publish'), { force: true });
      del.sync(path.join(athenaPath, 'tmp'), { force: true });
      del.sync(path.join(athenaCachePath, 'build', 'sass'), { force: true });
      del.sync(path.join(athenaCachePath, 'build', 'images'), { force: true });
    }
    console.log();
    console.log(chalk.green('  清除成功！'));
    console.log();
  });

program
  .command('update')
  .alias('up')
  .option('--debug', '打印调试信息')
  .description('更新Athena')
  .action(function (option) {
    var isDebug = option.debug ? true : false;
    printAthena();
    // 检测版本，若版本旧则更新
    checkAthenaVersion(function (versionServer, versionNative, compareResult) {
      switch (compareResult) {
        case 0:
          console.log();
          console.log(chalk.green('  当前已经是最新版本Athena！'));
          console.log();
          break;
        case -1:
          console.log();
          console.log(chalk.red('  服务器端记录的Athena版本竟然比本地更旧，请反馈给liweitao或wuwenwei！'));
          console.log();
          break;
        case 1:
          console.log();
          console.log(chalk.green('  最新的Athena版本号为' + versionServer + '，正在自动更新...'));
          installAthena({
            version: versionServer,
            isDebug: isDebug
          });
          break;
      }
    }, function (info) {
      console.log();
      console.log(chalk.red('   服务器出错，请稍后再试！'));
      console.log();
      info ? console.log(info) : void(0);
    });
  });

program
  .command('list-config')
  .description('列出配置项')
  .action(function () {
    var config = Util.getConfig();
    console.log('  配置地址：' + path.join(Util.getAthenaPath(), 'config.json'));
    for (var i in config) {
      console.log('  ' + i + '=' + config[i]);
    }
  });
program
  .command('list-setting')
  .description('列出设置项')
  .action(function () {
    var setting = Util.getSetting();
    console.log('  设置地址：' + path.join(Util.getRootPath(), '.setting.json'));
    for (var i in setting) {
      console.log('  ' + i + '=' + setting[i]);
    }
  });

program
  .command('*')
  .action(function () {
    console.log('    ' + chalk.red('没有该命令哟，请通过 athena -h 查看帮助！'));
  });

// 新版本更新提醒功能
var remindFile = path.join(Util.getAthenaPath(), '.remind.json');
var remindInfo = {};
if (Util.existsSync(remindFile)) {
  try {
    remindInfo = JSON.parse(String(fs.readFileSync(remindFile)));
  } catch (ex) {
    remindInfo = {};
  }
}
if (!remindInfo.update) {
  remindInfo.update = {};
}
var updateInfo = remindInfo.update;
if (!updateInfo.date || !Util.isToday(updateInfo.date)) {
  checkAthenaVersion(function (versionServer, versionNative, compareResult) {
    if (compareResult === 1) {
      var prompt = [];
      prompt.push({
        type: 'confirm',
        name: 'isUpdate',
        message: '检测到有新版本的Athena，版本号为' + versionServer + '，在修复问题的同时，新增了许多实用功能，你不想更新一下么？',
        default: true
      });
      inquirer.prompt(prompt, function (answers) {
        if (answers.isUpdate) {
          console.log();
          console.log(chalk.green('  正在自动安装更新...'));
          installAthena({
            version: versionServer,
            isDebug: false,
            onSuccess: function () {
              remindInfo.update.date = new Date().getTime();
              fs.writeFileSync(remindFile, JSON.stringify(remindInfo, null, 2));
            },
            onError: function () {
              remindInfo.update.date = new Date().getTime();
              fs.writeFileSync(remindFile, JSON.stringify(remindInfo, null, 2));
            }
          });
        } else {
          remindInfo.update.date = new Date().getTime();
          fs.writeFileSync(remindFile, JSON.stringify(remindInfo, null, 2));
        }
      });
    } else {
      program.parse(process.argv);
      printNoCommand();
      remindInfo.update.date = new Date().getTime();
      fs.writeFileSync(remindFile, JSON.stringify(remindInfo, null, 2));
    }
  }, function () {
    program.parse(process.argv);
    printNoCommand();
  });
} else {
  program.parse(process.argv);
  printNoCommand();
}

function printNoCommand () {
  if (!process.argv.slice(2).length) {
    printAthena();
    program.outputHelp();
  }
}
